<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="75">
  <server artifactsdir="artifacts" purgeStart="5.0" purgeUpto="12.0" commandRepositoryLocation="genivi" serverId="0634fc43-adff-426b-b417-781a09b9c51a">
    <security>
      <passwordFile path="/gousers/users" />
      <roles>
        <role name="Guest">
          <users>
            <user>user</user>
            <user>guest</user>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
            <user>buildmonitor</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
          </users>
        </role>
        <role name="Developer">
          <users>
            <user>PedroA</user>
            <user>StephenL</user>
            <user>tpollard</user>
            <user>mhoyer</user>
            <user>gmacario</user>
            <user>marcor</user>
            <user>ChunsungJung</user>
          </users>
        </role>
        <role name="GDP_Developer">
          <users>
            <user>StephenL</user>
            <user>PedroA</user>
            <user>tpollard</user>
          </users>
        </role>
      </roles>
      <admins>
        <user>gunnar</user>
        <user>PedroA</user>
        <user>GunnarA</user>
        <user>stevel</user>
      </admins>
    </security>
  </server>
  <pipelines group="GENIVI_Baselines">
    <authorization>
      <view>
        <role>Guest</role>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="yocto-baseline" labeltemplate="9.0:${meta-ivi[:8]}" isLocked="false" template="meta-ivi-build-kronos">
      <materials>
        <git url="git://git.yoctoproject.org/meta-ivi" branch="9.0" dest="meta-ivi" materialName="meta-ivi" />
        <git url="git://git.yoctoproject.org/poky" branch="fido" dest="poky" autoUpdate="false" materialName="poky_fido" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="fido" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_fido" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
    <pipeline name="yocto-baseline-next" labeltemplate="10.0:${meta-ivi[:8]}" isLocked="false" template="meta-ivi-build-leviathan">
      <materials>
        <git url="http://git.yoctoproject.org/git/meta-ivi" branch="10.0_w19" dest="meta-ivi" materialName="meta-ivi" />
        <git url="http://git.yoctoproject.org/git/poky.git" branch="jethro" dest="poky" autoUpdate="false" materialName="poky_jethro" />
        <git url="git://git.openembedded.org/meta-openembedded" branch="jethro" dest="meta-openembedded" autoUpdate="false" materialName="meta-openembedded_jethro" />
        <git url="https://github.com/gunnarx/baseline_ci_helper.git" dest="baseline_ci_helper" autoUpdate="false" materialName="baseline_ci_helper" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="GDP">
    <authorization>
      <view>
        <role>Guest</role>
        <role>GDP_Developer</role>
      </view>
      <operate>
        <role>GDP_Developer</role>
      </operate>
      <admins>
        <role>GDP_Developer</role>
      </admins>
    </authorization>
    <pipeline name="GDP-Yocto-Minnowboard" labeltemplate="gdp-git:${genivi-demo-platform.git[:8]}" isLocked="false" template="Yocto_GDP_Build_4_thread_limit">
      <materials>
        <git url="git://git.projects.genivi.org/genivi-demo-platform.git" branch="minnowboard" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64" labeltemplate="gdp-git:${genivi-demo-platform.git[:8]}" isLocked="false" template="Yocto_GDP_Build_4_thread_limit">
      <materials>
        <git url="http://git.projects.genivi.org/genivi-demo-platform.git" branch="qemux86-64" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="Yocto-GDP-Porter-with-GFX" labeltemplate="gdp-git:${genivi-demo-platform.git[:8]}" isLocked="false" template="Yocto_GDP_Build_Renesas">
      <materials>
        <git url="git://git.projects.genivi.org/genivi-demo-platform.git" branch="porter" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-Koelsch-with-GFX" labeltemplate="gdp-git:${genivi-demo-platform.git[:8]}" isLocked="false" template="Yocto_GDP_Build_Renesas">
      <materials>
        <git url="git://git.projects.genivi.org/genivi-demo-platform.git" branch="koelsch" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Components">
    <authorization>
      <view>
        <role>Developer</role>
        <role>Guest</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="DLT-daemon-native" isLocked="false" template="CMAKE_build">
      <materials>
        <git url="http://git.projects.genivi.org/dlt-daemon.git" materialName="dlt-daemon.git" />
      </materials>
    </pipeline>
    <pipeline name="GENIVI_Positioning" isLocked="false">
      <timer onlyOnChanges="true">0 0 22 ? * MON-FRI</timer>
      <materials>
        <git url="http://git.projects.genivi.org/lbs/positioning.git" materialName="PositioningGitRepository" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>rm -rf build &amp;&amp; mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -DWITH_DBUS_INTERFACE=ON -DWITH_FRANCA_DBUS_INTERFACE=OFF -DWITH_FRANCA_SOMEIP_INTERFACE=OFF -DWITH_TESTS=ON -DWITH_DEBUG=ON -DWITH_DLT=OFF -DCMAKE_BUILD_TYPE=Debug ../</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>cd build &amp;&amp; make</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-tools" labeltemplate="${COUNT}:master:${common-api-tools.git[:8]}" isLocked="false">
      <materials>
        <git url="http://git.projects.genivi.org/ipc/common-api-tools.git" materialName="common-api-tools.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn" workingdir="org.genivi.commonapi.core.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.core.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../org.genivi.commonapi.core.cli.product/target/products/commonapi-generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-runtime" labeltemplate="${COUNT}:master:${common-api-runtime.git[:8]}" isLocked="false" template="CMAKE_build">
      <materials>
        <git url="http://git.projects.genivi.org/ipc/common-api-runtime.git" materialName="common-api-runtime.git" />
      </materials>
    </pipeline>
    <pipeline name="common-api-cpp-dbus-tools" labeltemplate="${COUNT}:master:${common-api-dbus-tools.git[:8]}" isLocked="false">
      <materials>
        <git url="http://git.projects.genivi.org/ipc/common-api-dbus-tools.git" materialName="common-api-dbus-tools.git" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <tasks>
              <exec command="mvn" workingdir="org.genivi.commonapi.dbus.releng">
                <arg>-Dtarget.id=org.genivi.commonapi.dbus.target</arg>
                <arg>clean</arg>
                <arg>verify</arg>
              </exec>
              <exec command="mkdir">
                <arg>bin</arg>
                <runif status="passed" />
              </exec>
              <exec command="unzip" workingdir="bin">
                <arg>../org.genivi.commonapi.dbus.cli.product/target/products/commonapi_dbus_generator.zip</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>maven</resource>
            </resources>
            <artifacts>
              <artifact src="bin" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="common-api-cpp-dbus-runtime" labeltemplate="${COUNT}:master:${common-api-dbus-runtime.git[:8]}" isLocked="false">
      <materials>
        <git url="http://git.projects.genivi.org/ipc/common-api-dbus-runtime.git" materialName="common-api-dbus-runtime.git" />
        <pipeline pipelineName="common-api-cpp-runtime" stageName="build" materialName="build" />
        <pipeline pipelineName="libdbus-with-commonapi-patch" stageName="patch_and_build" materialName="libdbus-with-commonapi-patch" />
      </materials>
      <stage name="build">
        <jobs>
          <job name="build">
            <environmentvariables>
              <variable name="CommonAPI_DIR">
                <value>../common-api-cpp-runtime-build/build</value>
              </variable>
              <variable name="PKG_CONFIG_PATH">
                <value>/var/lib/go-agent/pipelines/common-api-cpp-dbus-runtime/libdbus_patched/results/lib/pkgconfig</value>
              </variable>
            </environmentvariables>
            <tasks>
              <fetchartifact pipeline="common-api-cpp-runtime" stage="build" job="cmake_and_make" srcdir="build" dest="common-api-cpp-runtime-build">
                <runif status="passed" />
              </fetchartifact>
              <fetchartifact pipeline="libdbus-with-commonapi-patch" stage="patch_and_build" job="patch_and_build" srcdir="results" dest="libdbus_patched">
                <runif status="passed" />
              </fetchartifact>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
              </exec>
              <exec command="mkdir">
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>-D</arg>
                <arg>USE_INSTALLED_COMMONAPI=ON</arg>
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build/*.so*" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="libdbus-with-commonapi-patch" labeltemplate="${COUNT}:master:${dbus.git[:8]}" isLocked="false">
      <materials>
        <git url="http://anongit.freedesktop.org/git/dbus/dbus.git" dest="dbus" materialName="dbus.git" />
        <git url="http://git.projects.genivi.org/ipc/common-api-dbus-runtime.git" dest="common-api-dbus-runtime" materialName="common-api-dbus-runtime.git" />
      </materials>
      <stage name="patch_and_build">
        <jobs>
          <job name="patch_and_build">
            <tasks>
              <exec command="git" workingdir="dbus">
                <arg>checkout</arg>
                <arg>dbus-1.9.0</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="dbus">
                <arg>-c</arg>
                <arg>for f in ../common-api-dbus-runtime/src/dbus-patches/*.patch ; do patch -p1 &lt;"$f" || exit 1 ; done</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>results</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="dbus">
                <arg>autogen.sh</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="dbus">
                <arg>-c</arg>
                <arg>./configure --prefix $PWD/../results</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="dbus">
                <arg>-j4</arg>
                <arg>-C</arg>
                <arg>dbus</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="dbus">
                <arg>install</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>libtool</resource>
            </resources>
            <artifacts>
              <artifact src="results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="Experiments_and_Testing">
    <authorization>
      <view>
        <role>Guest</role>
      </view>
      <operate>
        <role>Guest</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
    <pipeline name="SDK">
      <materials>
        <git url="http://git.projects.genivi.org/meta-genivi-demo.git" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="Build">
            <tasks>
              <ant />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Test">
        <jobs>
          <job name="Test">
            <tasks>
              <ant />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="ManualTest">
        <approval type="manual" />
        <jobs>
          <job name="Trigger">
            <tasks>
              <exec command="test" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="Copy_to_web_server">
        <jobs>
          <job name="copy">
            <tasks>
              <ant />
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="dev-GDP-porter8" labeltemplate="gdp-git:${genivi-demo-platform.git[:8]}" isLocked="false" template="Yocto_GDP_Build_Renesas">
      <materials>
        <git url="git://git.projects.genivi.org/genivi-demo-platform.git" branch="dev-porter-8" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="DiskStatistics-build0" isLocked="false">
      <materials>
        <git url="http://github.com/gunnarx/gocd-setup.git" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="disk_usage">
            <tasks>
              <exec command="uname">
                <arg>-a</arg>
                <runif status="passed" />
              </exec>
              <exec command="df">
                <arg>-h</arg>
              </exec>
            </tasks>
            <resources>
              <resource>big_disk</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="DiskStatistics-codethink1" isLocked="false">
      <materials>
        <git url="http://github.com/gunnarx/gocd-setup.git" />
      </materials>
      <stage name="stage">
        <approval type="manual" />
        <jobs>
          <job name="disk_usage">
            <tasks>
              <exec command="uname">
                <arg>-a</arg>
                <runif status="passed" />
              </exec>
              <exec command="df">
                <arg>-h</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ADITtest">
      <materials>
        <git url="http://git.projects.genivi.org/genivi-demo-platform.git" branch="qemux86-64" dest="genivi-demo-platform" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="bash" workingdir="genivi-demo-platform">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; bitbake genivi-demo-platform</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <tabs>
              <tab name="kernel" path="recording/bzImage-qemux86-64.bin" />
              <tab name="rfs" path="recoding/genivi-demo-platform-qemux86-64.ext3" />
            </tabs>
            <resources>
              <resource>big_disk</resource>
            </resources>
            <artifacts>
              <artifact src="genivi-demo-platform/gdp-src-build/tmp/deploy/images/qemux86-64/bzImage-qemux86-64.bin" dest="recording" />
              <artifact src="genivi-demo-platform/gdp-src-build/tmp/deploy/images/qemux86-64/genivi-demo-platform-qemux86-64.ext3" dest="recording" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="hello-world">
      <materials>
        <git url="https://github.com/gmacario/hello.git" />
      </materials>
      <stage name="defaultStage">
        <jobs>
          <job name="defaultJob">
            <tasks>
              <exec command="make" />
            </tasks>
            <artifacts>
              <artifact src="hello*" dest="gm_results" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="software-loading-manager" isLocked="false">
      <materials>
        <git url="https://github.com/magnusfeuer/genivi_software_management.git" />
      </materials>
      <stage name="commonApiGenerationStage">
        <jobs>
          <job name="commonApiGenerationJob">
            <tasks>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>printenv &amp;&amp; true</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="compileCppStage">
        <jobs>
          <job name="compileCppJob">
            <tasks>
              <exec command="true" />
            </tasks>
          </job>
        </jobs>
      </stage>
      <stage name="runSWLMPocStage">
        <jobs>
          <job name="runSWLMPocJob">
            <tasks>
              <exec command="./start_swm.sh">
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
  <pipelines group="GDP_Maintenance">
    <pipeline name="GDP-Yocto-QEMU_x86-64-qemu-ci" template="Yocto_GDP_qemu_image">
      <materials>
        <git url="http://git.projects.genivi.org/genivi-demo-platform.git" branch="qemu-ci" materialName="genivi-demo-platform.git" />
      </materials>
    </pipeline>
    <pipeline name="GDP-Yocto-QEMU_x86-64-meta-genivi-demo-qemu-ci" template="Yocto_GDP_qemu_latest_meta_genivi_demo">
      <materials>
        <git url="git://git.projects.genivi.org/genivi-demo-platform.git" branch="qemux86-64" dest="gdp" materialName="genivi-demo-platform.git" />
        <git url="git://git.projects.genivi.org/meta-genivi-demo.git" branch="qemu-ci" dest="meta-genivi-demo" materialName="meta-genivi-demo.git" />
      </materials>
    </pipeline>
  </pipelines>
  <pipelines group="Retired_Pipelines">
    <authorization>
      <view>
        <role>Guest</role>
        <role>Developer</role>
      </view>
      <operate>
        <role>Developer</role>
      </operate>
      <admins>
        <role>Developer</role>
      </admins>
    </authorization>
  </pipelines>
  <templates>
    <pipeline name="Yocto_GDP_Build_4_thread_limit">
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="/bin/sh" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/touch" workingdir="gdp-src-build/conf">
                <arg>local_conf_modified</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; bitbake genivi-demo-platform</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="CMAKE_build">
      <stage name="build">
        <jobs>
          <job name="cmake_and_make">
            <tasks>
              <exec command="rm">
                <arg>-rf</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="mkdir">
                <arg>-p</arg>
                <arg>build</arg>
                <runif status="passed" />
              </exec>
              <exec command="cmake" workingdir="build">
                <arg>..</arg>
                <runif status="passed" />
              </exec>
              <exec command="make" workingdir="build">
                <arg>V=1</arg>
                <arg>-j2</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>cmake</resource>
            </resources>
            <artifacts>
              <artifact src="build" />
            </artifacts>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_Build_Renesas">
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="cp">
                <arg>/home/user/renesas-graphics-drivers/r8a7791_linux_sgx_binaries_gles2.tar.bz2</arg>
                <arg>meta-renesas/meta-rcar-gen2/recipes-graphics/gles-module/gles-user-module/</arg>
                <runif status="passed" />
              </exec>
              <exec command="cp">
                <arg>/home/user/renesas-graphics-drivers/SGX_KM_M2.tar.bz2</arg>
                <arg>meta-renesas/meta-rcar-gen2/recipes-kernel/gles-module/gles-kernel-module/</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>. ./init.sh &amp;&amp; bitbake genivi-demo-platform</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>renesas_binaries</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build-kronos">
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="TEMPLATECONF">
                <value>/var/lib/go-agent/$GO_PIPELINE_NAME/meta-ivi/meta-ivi/conf</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh poky</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh meta-openembedded</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env &amp;&amp; bitbake kronos-image</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>big_disk</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="meta-ivi-build-leviathan">
      <stage name="Build">
        <jobs>
          <job name="init_and_bitbake">
            <environmentvariables>
              <variable name="TEMPLATECONF">
                <value>/var/lib/go-agent/$GO_PIPELINE_NAME/meta-ivi/meta-ivi/conf</value>
              </variable>
            </environmentvariables>
            <tasks>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.name</arg>
                <arg>Go Server</arg>
                <runif status="passed" />
              </exec>
              <exec command="git" workingdir="meta-ivi">
                <arg>config</arg>
                <arg>--global</arg>
                <arg>user.email</arg>
                <arg>no_email@genivigo.com</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh poky</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="baseline_ci_helper">
                <arg>-c</arg>
                <arg>./checkout_layer_hash.sh meta-openembedded</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/bash">
                <arg>-c</arg>
                <arg>export TEMPLATECONF=$PWD/meta-ivi/meta-ivi/conf &amp;&amp; source poky/oe-init-build-env &amp;&amp; bitbake leviathan-image</arg>
                <runif status="passed" />
              </exec>
            </tasks>
            <resources>
              <resource>big_disk</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_qemu_image">
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp-src-build">
                <arg>-rf</arg>
                <arg>tmp</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/srv/go/dl"\nSSTATE_DIR = "/srv/go/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'IMAGE_FSTYPES = "hddimg"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/touch" workingdir="gdp-src-build/conf">
                <arg>local_conf_modified</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; bitbake genivi-demo-platform</arg>
              </exec>
              <exec command="bash">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; mkdir output &amp;&amp; ../poky/scripts/wic create directdisk -e genivi-demo-platform --outdir=output</arg>
              </exec>
            </tasks>
            <resources>
              <resource>ct_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="Yocto_GDP_qemu_latest_meta_genivi_demo">
      <stage name="build">
        <jobs>
          <job name="init_and_bitbake">
            <tasks>
              <exec command="rm" workingdir="gdp">
                <arg>-rf</arg>
                <arg>meta-genivi-demo</arg>
                <runif status="passed" />
              </exec>
              <exec command="mv" workingdir="gdp">
                <arg>../meta-genivi-demo</arg>
                <arg>.</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'BB_NUMBER_THREADS = "2"\nPARALLEL_MAKE = "-j2"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'DL_DIR = "/srv/go/dl"\nSSTATE_DIR = "/srv/go/sstate"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/bin/sh" workingdir="gdp/gdp-src-build/conf">
                <arg>-c</arg>
                <arg>/bin/echo -e 'IMAGE_FSTYPES = "hddimg"' &gt;&gt;local.conf</arg>
                <runif status="passed" />
              </exec>
              <exec command="/usr/bin/touch" workingdir="gdp/gdp-src-build/conf">
                <arg>local_conf_modified</arg>
                <runif status="passed" />
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; bitbake genivi-demo-platform</arg>
              </exec>
              <exec command="bash" workingdir="gdp">
                <arg>-c</arg>
                <arg>source ./init.sh &amp;&amp; mkdir output &amp;&amp; ../poky/scripts/wic create directdisk -e genivi-demo-platform --outdir=output</arg>
              </exec>
              <exec command="rm">
                <arg>-r</arg>
                <arg>gdp</arg>
              </exec>
            </tasks>
            <resources>
              <resource>ct_test</resource>
            </resources>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </templates>
  <agents>
    <agent hostname="build0.genivigo.com" ipaddress="10.0.0.103" uuid="7cc5ab78-8c05-4c86-9dd4-0b7a1bf8388f">
      <resources>
        <resource>big_disk</resource>
        <resource>renesas_binaries</resource>
      </resources>
    </agent>
    <agent hostname="codethink-genivigo-agent0" ipaddress="192.168.1.45" uuid="3d6fa53c-5619-46c9-8260-034a1fb414e3">
      <resources>
        <resource>arm</resource>
      </resources>
    </agent>
    <agent hostname="codethink-genivigo-agent1-x86" ipaddress="192.168.144.36" uuid="98b572c4-d559-4ed2-8b00-f4c25851e443">
      <resources>
        <resource>ct_test</resource>
      </resources>
    </agent>
    <agent hostname="2131ce1bd33e" ipaddress="172.17.1.61" uuid="ce4f9ef6-91a4-44c3-881e-3486ff87a2aa">
      <resources>
        <resource>big_disk</resource>
        <resource>cmake</resource>
        <resource>maven</resource>
        <resource>ga_test</resource>
        <resource>libtool</resource>
      </resources>
    </agent>
  </agents>
</cruise>

